Discussion Questions
Amanda Stephano

Runtime

1. When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?

The workload is determined by the number of animal crackers in a box.


2. Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity:
O(1)
O(n)
O(log n)
O(n log n)
O(n2)
O(2^n) (i.e. 2 to the n-th power)

Stacks and Queues

1. In the following cases, would a stack or queue be a more appropriate data structure?

	1. The process of loading and unloading pallets onto a flatbed truck
		Stack

	2. Putting bottle caps on bottles of beer as they roll down an assembly line
		Queue

	3. Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)
		Stack

2. Describe two more situations where a queue would be an appropriate data structure.
 	- A To Do list because you would want to do the tasks in order of how they were added. So you would start with the very first take that you added.
 	- Any sort of line. Like waiting in line a Disney World for a ride. 

3. Describe two more situations where a stack would be an appropriate data structure.
	- Undo in any program because you want to undo the very last thing that you did.  
	- Pancakes because start with eating the one on the top of the stack.  



Linked Lists

1. Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)

	The head is "Apple" beacuse the arrow from the "head" box is pointing to it

	The first node is "Apple" because the head is pointing to it. The data for the first node is "Apple"

	The next node after "Apple" has the data "Berry." We know this because there is an arrow pointing from the "Apple" node next to "Berry".

	Next for the "Berry" node points to the node that contains the data "Cherry". Again the arrow from next indicates this.  

	The next for "Berry" points "None" so we know this is the tail.


2. What’s the difference between doubly- and singly-linked lists?
	Singly-linked lists only have "next" which points to the "next" node.
	Doubly-linked lists have "previous" and "next". "Previous" points to the node that comes before them. 

3. Why is it faster to append to a linked list if we keep track of the tail as an attribute?
	Because we don't have to traverse the list every time we append. If we did, the runtime would be O(n). If we keep track of the tail, then the runtime would just be O(1) to append which is much better.  

Trees


1. Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burrito (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
	food, Italian, Indian, Mexican, lasagna, pizza, tikka masala, saag, BURRITO

2. Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
	food, Mexicanm, enchilada, tacos, burrito, Indian, tikka masala, saag, Italian, pizza, Sicillian, New York-style, CHICAGO-STYLE

3. How is a binary search tree different from other trees?
	-You can balance it so that the "root" is the midpoint in the list
	-If balanced, runtime ends up being O(log n) intead of O(n^2)
	-Each node, can only have up to two children. 




